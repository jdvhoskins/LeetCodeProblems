// Determine if a binary tree is height balanced.
// The depth of each node's subtrees must differ by no more than 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (!root) return true;
        
        if (isLeaf(root)) return true;
        else if(root->left==NULL){
            if(isLeaf(root->right)) return true;
            else return false;
        }
        else if(root->right==NULL){
            if(isLeaf(root->left)) return true;
            else return false;
        }
        else return (isBalanced(root->left) && isBalanced(root->right)) && abs(getDepth(root->left)-getDepth(root->right))<=1;
        


    }

    bool isLeaf(TreeNode* node){
        if (!node->left && !node->right) return true;
        else return false;
    }
    
    int getDepth(TreeNode* node){
        if(isLeaf(node)) return 1;
        else if (!node->left) return getDepth(node->right)+1;
        else if (!node->right) return getDepth(node->left)+1;
        else return max(getDepth(node->left),getDepth(node->right))+1;
    }
};